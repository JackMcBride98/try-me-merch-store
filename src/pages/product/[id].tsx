import * as DropdownMenu from "@radix-ui/react-dropdown-menu";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { type Prisma } from "@prisma/client";
import { prisma } from "@/server/db";
import { type GetStaticPropsContext } from "next";
import { type ParsedUrlQuery } from "querystring";
import { SizeSelect } from "@/components/sizeSelect";
import { useState } from "react";
import { Header } from "@/components/header";

interface IParams extends ParsedUrlQuery {
  id: string;
}

export type ProductPageProps = {
  product: Prisma.ProductGetPayload<{
    include: { stockKeepingUnits: true; images: true };
  }>;
};

export default function ProductPage({ product }: ProductPageProps) {
  const [size, setSize] = useState(product.stockKeepingUnits[0]?.size ?? "");
  const [quantity, setQuantity] = useState(1);

  const selectedSku = product.stockKeepingUnits.find(
    (sku) => sku.size === size
  );

  return (
    <>
      <Head>
        <title>Try Me - Store</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/logo.png" />
      </Head>

      <Header
        dropdownOptions={
          <>
            <DropdownMenu.Item
              className="p-2 hover:cursor-pointer"
              onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}
            >
              <Link href="/">Home</Link>
            </DropdownMenu.Item>
            <DropdownMenu.Item className="p-2">
              <Link href="/store">Store</Link>
            </DropdownMenu.Item>
          </>
        }
      />
      <div className="max-w-screen bg-animate flex min-h-screen w-full flex-col items-center space-y-4 bg-gradient-to-b from-black to-[#04100C] pb-4 text-white">
        <h1 className="mb-4 mt-24 text-4xl">{product.name}</h1>
        {product.images.map((image) => (
          <Image
            key={image.id}
            src={image.url}
            alt={product.name}
            width={250}
            height={250}
          />
        ))}
        <p>Description - {product.description}</p>
        <p>Size</p>
        <SizeSelect
          value={size}
          setValue={setSize}
          options={product.stockKeepingUnits}
        />
        <p>In Stock - {selectedSku?.amount}</p>
        <p>Quantity</p>
        <div className="flex items-center border border-[#7DFCB2]/20 bg-white text-2xl text-black">
          <button
            onClick={() => setQuantity((q) => (q - 1 > 1 ? q - 1 : 1))}
            className="w-8 text-center font-bold"
          >
            -
          </button>
          <input
            type="number"
            value={quantity}
            className="hide-arrows h-full w-16 text-center text-lg"
          />
          <button
            onClick={() =>
              setQuantity((q) =>
                q + 1 <= (selectedSku?.amount ?? 10) ? q + 1 : q
              )
            }
            className="w-8 text-center font-bold"
          >
            +
          </button>
        </div>
        <button className="rounded-md bg-black p-4 text-white">
          Add to basket
        </button>
      </div>
    </>
  );
}

export async function getStaticPaths() {
  const products = await prisma.product.findMany();

  return {
    paths: products.map((product) => ({ params: { id: product.id } })),
    fallback: false,
  };
}

export async function getStaticProps({ params }: GetStaticPropsContext) {
  const { id } = params as IParams;
  const product = await prisma.product.findUnique({
    where: { id },
    include: { stockKeepingUnits: true, images: true },
  });

  return { props: { product } };
}
